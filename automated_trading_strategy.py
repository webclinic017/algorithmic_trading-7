#A Strategy object encapsulates all calculation on market data that generate advisory signals to a Portfolio object.

# strategy.py
from __future__ import print_function

from abc import ABCMeta, abstractmethod 
import datetime

try:
  import Queue as queue 
except ImportError:
  import queue
  
import numpy as np 
import pandas as pd

from event import SignalEvent

# strategy.py
class Strategy(object): 
  """
  Strategy is an abstract base class providing an interface for all subsequent (inherited) strategy handling objects.
  The goal of a (derived) Strategy object is to generate Signal
  objects for particular symbols based on the inputs of Bars
  (OHLCV) generated by a DataHandler object.
  This is designed to work both with historic and live data as
  the Strategy object is agnostic to where the data came from, since it obtains the bar tuples from a queue object.
  """
  __metaclass__ = ABCMeta

  @abstractmethod
  def calculate_signals(self):
    """
    Provides the mechanisms to calculate the list of signals.
    """
    raise NotImplementedError("Should implement calculate_signals()")
    
#performance.py
from __future__ import print_function

import numpy as np 
import pandas as pd

def create_sharpe_ratio(returns, periods=252): 
  """
  Create the Sharpe ratio for the strategy, based on a
  benchmark of zero (i.e. no risk-free rate information).
  Parameters:
  returns - A pandas Series representing period percentage returns. periods - Daily (252), Hourly (252*6.5), Minutely(252*6.5*60) etc. 
  """
  return np.sqrt(periods) * (np.mean(returns)) / np.std(returns)

def create_drawdowns(pnl): 
  """
  Calculate the largest peak-to-trough drawdown of the PnL curve as well as the duration of the drawdown. 
  Requires that the pnl_returns is a pandas Series.
  Parameters:
  pnl - A pandas Series representing period percentage returns.
  Returns:
  drawdown, duration - Highest peak-to-trough drawdown and duration. 
  """
  # Calculate the cumulative returns curve
  # and set up the High Water Mark
  hwm = [0]
  
  # Create the drawdown and duration series
  idx = pnl.index
  drawdown = pd.Series(index = idx)
  duration = pd.Series(index = idx)
  
  # Loop over the index range
  for t in range(1, len(idx)):
    hwm.append(max(hwm[t-1], pnl[t]))
    drawdown[t]= (hwm[t]-pnl[t])
    duration[t]= (0 if drawdown[t] == 0 else duration[t-1]+1)
  return drawdown, drawdown.max(), duration.max()

